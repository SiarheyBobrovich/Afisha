CREATE SCHEMA IF NOT EXISTS
SECURITY AUTHORIZATION postgres;

CREATE TABLE IF NOT EXISTS security.roles (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT 1 START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1),
    ROLE text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_authorities PRIMARY KEY (id),
    CONSTRAINT authorities_authority_key UNIQUE (ROLE),
    CONSTRAINT authorities_id_key UNIQUE (id)
)
TABLESPACE pg_default;

CREATE TABLE IF NOT EXISTS security.users (
    uuid uuid NOT NULL,
    username text COLLATE pg_catalog."default" NOT NULL,
    PASSWORD text COLLATE pg_catalog."default" NOT NULL,
    nick text COLLATE pg_catalog."default" NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL,
    dt_create timestamp WITHOUT time zone NOT NULL,
    dt_update timestamp(3) WITHOUT time zone NOT NULL,
    CONSTRAINT pk_users PRIMARY KEY (uuid),
    CONSTRAINT uc_users_username UNIQUE (username),
    CONSTRAINT uc_users_uuid UNIQUE (uuid)
)
TABLESPACE pg_default;

CREATE TABLE IF NOT EXISTS security.users_authorities (
    authorities_id bigint NOT NULL,
    user_uuid uuid NOT NULL,
    CONSTRAINT pk_users_authorities PRIMARY KEY (authorities_id, user_uuid),
    CONSTRAINT fk_useaut_on_authority FOREIGN KEY (authorities_id) REFERENCES security.roles (id) MATCH SIMPLE,
    CONSTRAINT fk_useaut_on_user FOREIGN KEY (user_uuid) REFERENCES security.users (uuid) MATCH SIMPLE
)
TABLESPACE pg_default;

ALTER TABLE IF EXISTS security.users OWNER TO postgres;

ALTER TABLE IF EXISTS security.users_authorities OWNER TO postgres;

ALTER TABLE IF EXISTS security.roles OWNER TO postgres;

